diff --git a/13-isPalindrome/isPalindrome.js b/13-isPalindrome/isPalindrome.js
index 300955b..d2fc0f8 100644
--- a/13-isPalindrome/isPalindrome.js
+++ b/13-isPalindrome/isPalindrome.js
@@ -1,5 +1,17 @@
+// palindrome -> letters from start-middle === letters from end-middle
 function isPalindrome(word) {
-  // Insert code here;
+
+  // loop through letters in first half of the word and compare 
+  // with letters of second half starting from the last letter going to middle letter
+  for (let i = 0; i < word.length / 2; i++) {
+
+    // if any letters do not match, not a palindrome
+    if (word[i] !== word[word.length - 1 - i]) {
+      return false;
+    }
+  }
+
+  return true;
 }
 
 // Do not edit this line;
diff --git a/13-isPalindrome/isPalindrome.md b/13-isPalindrome/isPalindrome.md
index 60790e2..3a74a54 100644
--- a/13-isPalindrome/isPalindrome.md
+++ b/13-isPalindrome/isPalindrome.md
@@ -1,6 +1,6 @@
 # 13-isPalindrome
 
-For this exercise (`isPalindrome.js`), you are tasked to write out solution code for a function titled `isPalindrome(word)`. This function will take in one argument, a `string` referenced as `word`. This function will out put a `boolean` value indicating whether the input `word` is a palindrome. If the input `word` is a palindrome, return `true`. If the input `word` is not a palindrome, return `false`. A palindrome is a word that reads the same forwards as it does backwards.
+For this exercise (`isPalindrome.js`), you are tasked to write out solution code for a function titled `isPalindrome(word)`. This function will take in one argument, a `string` referenced as `word`. This function will output a `boolean` value indicating whether the input `word` is a palindrome. If the input `word` is a palindrome, return `true`. If the input `word` is not a palindrome, return `false`. A palindrome is a word that reads the same forwards as it does backwards.
 
 _In other words_:
 
