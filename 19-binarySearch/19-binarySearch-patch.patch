diff --git a/19-binarySearch/binarySearch.js b/19-binarySearch/binarySearch.js
index a0fff39..6be46f7 100644
--- a/19-binarySearch/binarySearch.js
+++ b/19-binarySearch/binarySearch.js
@@ -1,13 +1,46 @@
 class MySolution {
-  constructor() {
-    this.flag = false; // this is optional to use;
-  }
+	constructor() {
+		this.flag = false; // this is optional to use;
+	}
 
-  binarySearch(nums, target) {
-    // Insert code here;
-  }
+	binarySearch(nums, target) {
+    let start = 0;
+		let end = nums.length - 1;
+		let mid = Math.floor(end / 2);
+
+      // console.log("This is the nums array", nums);
+      // console.log("This is the target value", target);
+      // console.log("This is the mid index", mid);
+      // console.log();
+
+		// base case
+		if (nums[mid] === target) {
+			return true;
+		}
+    
+    // if target greater, get the second half of the array
+    // else if target smaller, get the first half of the array
+    nums[mid] < target ? start = mid + 1 : end = mid - 1;
+    
+    // slice() - substrings the array without altering the original
+    // start value included, end value excluded
+		let subArray = nums.slice(start, end + 1);
+      // console.log("This is the subarray", subArray);
+      // console.log();
+
+		// base case
+		if (subArray.length < 1) {
+			return false;
+		}
+
+    // recursive call
+		this.flag = this.binarySearch(subArray, target);
+      // console.log("This is the output", this.flag);
+
+    return this.flag;
+	}
 }
 
 // Do not edit this line;
 let StudentSolution = MySolution;
-module.exports = StudentSolution;
\ No newline at end of file
+module.exports = StudentSolution;
diff --git a/19-binarySearch/binarySearch.test.js b/19-binarySearch/binarySearch.test.js
index e231c09..9984bc6 100644
--- a/19-binarySearch/binarySearch.test.js
+++ b/19-binarySearch/binarySearch.test.js
@@ -13,6 +13,7 @@ describe("the binarySearch(nums, target) function", function() {
   })
 
   it("should be an inherited instance method", function() {
+    // respondTo() asserts that the instance object has a method with the given name
     expect(submittedSolution, "be sure to write this function as a class' instance method").to.respondTo("binarySearch");
   })
 
@@ -42,6 +43,7 @@ describe("the binarySearch(nums, target) function", function() {
     
     submittedSolution.binarySearch([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], 1);
     expect(mySpy.callCount).to.be.greaterThan(1);
+    // closeTo() takes an expected value, and an acceptable +/- range
     expect(mySpy.callCount).to.be.closeTo(4,1);
     
     mySpy.resetHistory();
@@ -55,8 +57,8 @@ describe("the binarySearch(nums, target) function", function() {
 
     mySpy.resetHistory();
 
-    let exampleArrB = Array.from({ length: 1000 });
-    exampleArrB = exampleArrB.map((_, idx) => idx + 1);
+    let exampleArrB = Array.from({ length: 1000 }); // create array of length 1000 (undefined elements)
+    exampleArrB = exampleArrB.map((_, idx) => idx + 1); // (element, index) maps values to array elements
 
     submittedSolution.binarySearch(exampleArrB, 2);
     expect(mySpy.callCount).to.be.greaterThan(1);
@@ -69,6 +71,7 @@ describe("the binarySearch(nums, target) function", function() {
   it("should not mutate the input array `nums`", function() {
     let sampleNums = [10,20,30,40,50,60,70,80,90,100];
     submittedSolution.binarySearch(sampleNums, 150);
+    // eql() checks for deep equality between the individual elements in the array, not the array reference
     expect(sampleNums).to.eql([10,20,30,40,50,60,70,80,90,100]);
   })
 
